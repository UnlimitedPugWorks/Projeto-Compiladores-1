#define INTEGER 257
#define CHAR 258
#define VARNAME 259
#define STR 260
#define FUNCTION 261
#define MODULE 262
#define START 263
#define VOID 264
#define CONST 265
#define NUMBER 266
#define ARRAY 267
#define STRING 268
#define PUBLIC 269
#define FORWARD 270
#define IF 271
#define FI 272
#define THEN 273
#define FOR 274
#define ELSE 275
#define ELIF 276
#define PROGRAM 277
#define END 278
#define UNTIL 279
#define STEP 280
#define DO 281
#define DONE 282
#define REPEAT 283
#define STOP 284
#define RETURN 285
#define GE 286
#define LE 287
#define EQ 288
#define NE 289
#define ADD 290
#define OR 291
#define SUBT 292
#define MOD 293
#define ADDR 294
#define LS 295
#define GR 296
#define POW 297
#define ID 298
#define AND 299
#define MINUS 300
#define DIV 301
#define NOT 302
#define IDPOINTER 303
#define MUL 304
#define ARG 305
#define PROGRAMDEC 306
#define MODULEDEC 307
#define ELIFT 308
#define RETURNEXPR 309
#define RETURNVOID 310
#define BODYVARLIST 311
#define BODYINST 312
#define BODYVAR 313
#define QUALIIFIER 314
#define QUALTYPE 315
#define INSTRUCTLIST 316
#define IFTHEN 317
#define IFTHENELSE 318
#define DECLIST 319
#define DECLTYPE 320
#define ARGLIST 321
#define INT 322
#define VAR 323
#define PRINTEXPR 324
#define LEFTVALUE 325
#define EMPTY 326
#define LISTEND 327
#define SETEND 328
#define VARDEC 329
#define FUNCDEC 330
#define BODY 331
#define LITYPE 332
#define LITERALSET 333
#define LITERALIST 334
#define TYPE 335
#define FUNCTYPE 336
#define FICHEIRO 337
#define VARPOINTER 338
#define VARLIST 339
#define VARPOINTERDEC 340
#define SET 341
#define LIST 342
#define INDEX 343
#define FUNCBODY 344
#define FUNC 345
#define PROGBODY 346
#define FUNCALL 347
#define READ 348
#define EXPR 349
#define CHARACTER 350
#define INITER 351
#define INITIALIZERS 352
#define IEQ 353
#define ADDRESS 354
#define UMINUS 355
#ifdef YYSTYPE
#undef  YYSTYPE_IS_DECLARED
#define YYSTYPE_IS_DECLARED 1
#endif
#ifndef YYSTYPE_IS_DECLARED
#define YYSTYPE_IS_DECLARED 1
typedef union {
	int i;			/* integer value */
	char *s;		/* symbol name or string literal */
	Node *n;		/* node pointer */
} YYSTYPE;
#endif /* !YYSTYPE_IS_DECLARED */
extern YYSTYPE yylval;
